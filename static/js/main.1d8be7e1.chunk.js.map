{"version":3,"sources":["CatSpinner.js","App.js","serviceWorker.js","index.js"],"names":["CatSpinner","className","App","abortController","AbortController","useState","facts","setFacts","loading","setLoading","fetchData","a","fetch","signal","then","response","json","data","error","aborted","console","log","useEffect","abort","map","index","fact","length","key","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sPAyBeA,MAtBf,WACE,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,WAEjB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,SAEjB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,SACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,c,MC0CVC,MAxDf,WACE,IAAMC,EAAkB,IAAIC,gBADf,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,oBAAS,GAH1B,mBAGNG,EAHM,KAGGC,EAHH,KAKPC,EAAS,uCAAG,4BAAAC,EAAA,sDACVR,EAAkB,IAAIC,gBAC5B,IACEK,GAAW,GACXG,MAAM,sCAAuC,CAC3CC,OAAQV,EAAgBU,SAEvBC,MAAK,SAAAC,GACJA,EAASC,OACVF,MAAK,YAAe,IAAZG,EAAW,EAAXA,KACPV,EAASU,GACTR,GAAW,SAGf,MAAOS,GACFf,EAAgBU,OAAOM,SAC1BC,QAAQC,IAAIH,GAEdT,GAAW,GAlBG,2CAAH,qDAgCf,OAVAa,qBAAU,WACRZ,MACC,IAEHY,qBAAU,WACR,OAAO,WACLnB,EAAgBoB,WAEjB,CAACpB,IAEAK,EACK,kBAAC,EAAD,MAIP,yBAAKP,UAAU,OACb,uCACA,4BACGK,EAAMkB,KAAI,WAAmBC,GAAnB,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OACT,wBAAIC,IAAG,UAAKD,EAAL,YAAeF,IACnBA,EAAQ,EADX,MACiBC,OAIrB,4BAAQG,QAASnB,GAAjB,mBC3CAoB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTvB,MAAK,SAAA4B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1B5B,QAAQC,IACN,iHAKEiB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBtB,QAAQC,IAAI,sCAGRiB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAAjC,GACLE,QAAQF,MAAM,4CAA6CA,MC3FjEkC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,oBAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,oBAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtC1B,MAAMyB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5B/C,MAAK,SAAAC,GAEJ,IAAM+C,EAAc/C,EAAS8C,QAAQE,IAAI,gBAEnB,MAApBhD,EAASiD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMpD,MAAK,SAAA4B,GACjCA,EAAayB,aAAarD,MAAK,WAC7BkB,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL/B,QAAQC,IACN,oEAvFAgD,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMpD,MAAK,WACjCM,QAAQC,IACN,iHAMJe,EAAgBC,EAAOC,OCxC/BE,I","file":"static/js/main.1d8be7e1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './CatSpinner.scss'\r\n\r\nfunction CatSpinner() {\r\n  return (\r\n    <div className=\"loader\">\r\n      <div className=\"track\">\r\n        <div className=\"mouse\"></div>\r\n      </div>\r\n      <div className=\"face\">\r\n        <div className=\"ears-container\"></div>\r\n        <div className=\"eyes-container\">\r\n          <div className=\"eye\"></div>\r\n          <div className=\"eye\"></div>\r\n        </div>\r\n        <div className=\"phiz\">\r\n          <div className=\"nose\"></div>\r\n          <div className=\"lip\"></div>\r\n          <div className=\"mouth\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CatSpinner\r\n","import React, { useEffect, useState } from 'react'\nimport CatSpinner from './CatSpinner'\nimport './App.scss'\n\nfunction App() {\n  const abortController = new AbortController()\n  const [facts, setFacts] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  const fetchData = async () => {\n    const abortController = new AbortController()\n    try {\n      setLoading(true)\n      fetch('https://catfact.ninja/facts?limit=5', {\n        signal: abortController.signal,\n      })\n        .then(response => {\n          response.json()\n        .then(({ data }) => {\n          setFacts(data)\n          setLoading(false)\n        })\n      })\n    } catch (error) {\n      if (!abortController.signal.aborted) {\n        console.log(error)\n      }\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  useEffect(() => {\n    return () => {\n      abortController.abort()\n    }\n  }, [abortController])\n\n  if (loading) {\n    return <CatSpinner />\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Me-wow!</h1>\n      <ul>\n        {facts.map(({ fact, length }, index) => (\n          <li key={`${length}-${index}`}>\n            {index + 1} - {fact}\n          </li>\n        ))}\n      </ul>\n      <button onClick={fetchData}>Show me more!</button>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}